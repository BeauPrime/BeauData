using System.Collections.Generic;

namespace BeauData
{
    public abstract partial class Serializer
    {
        protected abstract bool Read_%TypeName%(ref %TypeName-Full% ioData);
        protected abstract void Write_%TypeName%(ref %TypeName-Full% ioData);

        private ReadFunc<%TypeName-Full%> Read_%TypeName%_Cached;
        private WriteFunc<%TypeName-Full%> Write_%TypeName%_Cached;

        public void Serialize(string inKey, ref %TypeName-Full% ioData, FieldOptions inOptions = FieldOptions.None)
        {
            DoSerialize<%TypeName-Full%>(inKey, ref ioData, inOptions,
                Read_%TypeName%_Cached ?? (Read_%TypeName%_Cached = Read_%TypeName%),
                Write_%TypeName%_Cached ?? (Write_%TypeName%_Cached = Write_%TypeName%));
        }

        public void Serialize(string inKey, ref %TypeName-Full% ioData, %TypeName-Full% inDefault, FieldOptions inOptions = FieldOptions.None)
        {
            DoSerialize<%TypeName-Full%>(inKey, ref ioData, inDefault, inOptions,
                Read_%TypeName%_Cached ?? (Read_%TypeName%_Cached = Read_%TypeName%),
                Write_%TypeName%_Cached ?? (Write_%TypeName%_Cached = Write_%TypeName%));
        }

        public void Array(string inKey, ref List<%TypeName-Full%> ioArray, FieldOptions inOptions = FieldOptions.None)
        {
            DoArray<%TypeName-Full%>(inKey, ref ioArray, inOptions,
                Read_%TypeName%_Cached ?? (Read_%TypeName%_Cached = Read_%TypeName%),
                Write_%TypeName%_Cached ?? (Write_%TypeName%_Cached = Write_%TypeName%));
        }

        public void Array(string inKey, ref %TypeName-Full%[] ioArray, FieldOptions inOptions = FieldOptions.None)
        {
            DoArray<%TypeName-Full%>(inKey, ref ioArray, inOptions,
                Read_%TypeName%_Cached ?? (Read_%TypeName%_Cached = Read_%TypeName%),
                Write_%TypeName%_Cached ?? (Write_%TypeName%_Cached = Write_%TypeName%));
        }

        public void Set(string inKey, ref HashSet<%TypeName-Full%> ioSet, FieldOptions inOptions = FieldOptions.None)
        {
            DoSet<%TypeName-Full%>(inKey, ref ioSet, inOptions,
                Read_%TypeName%_Cached ?? (Read_%TypeName%_Cached = Read_%TypeName%),
                Write_%TypeName%_Cached ?? (Write_%TypeName%_Cached = Write_%TypeName%));
        }

        public void Map(string inKey, ref Dictionary<string, %TypeName-Full%> ioMap, FieldOptions inOptions = FieldOptions.None)
        {
            DoMap<%TypeName-Full%>(inKey, ref ioMap, inOptions,
                Read_%TypeName%_Cached ?? (Read_%TypeName%_Cached = Read_%TypeName%),
                Write_%TypeName%_Cached ?? (Write_%TypeName%_Cached = Write_%TypeName%));
        }

        public void Map(string inKey, ref Dictionary<int, %TypeName-Full%> ioMap, FieldOptions inOptions = FieldOptions.None)
        {
            DoMap<%TypeName-Full%>(inKey, ref ioMap, inOptions,
                Read_%TypeName%_Cached ?? (Read_%TypeName%_Cached = Read_%TypeName%),
                Write_%TypeName%_Cached ?? (Write_%TypeName%_Cached = Write_%TypeName%));
        }
    }
}
